// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0
    PARTS:
	And16(a = x , b = x1 , out = zero);
	Not16(in = x , out = x1);
	Not16(in = y , out = y1);
	Add16(a = opx2 , b = opy2 , out = sum);
	And16(a = opx2 , b = opy2 , out = ad);
	Not16(in = op1 , out = op11);
	Not16(in = opx1 , out = opx11);
	Not16(in = opy1 , out = opy11);
	Mux16( a = x , b = zero , sel = zx , out = opx1);
	Mux16( a = opx1 , b = opx11 , sel = nx , out = opx2);
	Mux16( a = y , b = zero , sel = zy , out = opy1);
	Mux16( a = opy1 , b = opy11 , sel = ny , out = opy2);
	Mux16( a = ad , b = sum , sel = f , out = op1);
	Mux16( a = op1 , b = op11 , sel = no , out = out);
	Mux16( a = op1 , b = op11 , sel = no , out = ctrl);
	Not(in = f , out = f1);
    And(a = f , b = f1 , out = zer);
	Not(in = zer , out = pos);
//	Mux(a = zer, b = pos, sel = ctrl[15], out = ng);
	ctrl(in = ctrl , zer = zer , pos = pos , ng = ng , zr = zr);
//	Or(a = ctrl[0], b =  ctrl[1], out = an1);
//	Or(a = ctrl[2], b =  an1, out =  an2);
//	Or(a = ctrl[3], b =  an2, out =  an3);
//	Or(a = ctrl[4], b =  an3, out =  an4);
//	Or(a = ctrl[5], b =  an4, out =  an5);
//	Or(a = ctrl[6], b =  an5, out =  an6);
//	Or(a = ctrl[7], b =  an6, out =  an7);
//	Or(a = ctrl[8], b =  an7, out =  an8);
//    Or(a = ctrl[9], b =  an8, out =  an9);
//	Or(a = ctrl[10], b =  an9, out =  an10);
//	Or(a = ctrl[11], b =  an10, out =  an11);
//	Or(a = ctrl[12], b =  an11, out =  an12);
//	Or(a = ctrl[13], b =  an12, out =  an13);
//	Or(a = ctrl[14], b =  an13, out =  an14);
//	Or(a = ctrl[15], b =  an14, out =  an15);


//	Mux(a = pos, b = zer, sel = an15, out = zr);

}

